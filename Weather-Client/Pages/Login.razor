@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject Client.Services.ApiAuthService AuthService
@inject NavigationManager Navigation

<h3>Login</h3>

@if (!AuthService.IsLoggedIn)
{
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
    </EditForm>
}
else
{
    <div>
        <p>Welcome, @AuthService.CurrentUser?.Email!</p>
        <button class="btn btn-secondary" @onclick="HandleLogout">Logout</button>
    </div>
}

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        AuthService.OnAuthStateChanged += StateHasChanged;
    }

    private async Task HandleLogin()
    {
        if (!string.IsNullOrWhiteSpace(loginModel.Email) && !string.IsNullOrWhiteSpace(loginModel.Password))
        {
            var success = await AuthService.SignInAsync(loginModel.Email, loginModel.Password);
            if (success)
            {
                errorMessage = null;
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        else
        {
            errorMessage = "Email and password are required.";
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.SignOutAsync();
        Navigation.NavigateTo("/login");
    }

    public class LoginModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }
}
