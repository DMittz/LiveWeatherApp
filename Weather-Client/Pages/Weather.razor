@page "/weather"
@using Client.Models
@inject Client.Services.WeatherService WeatherService
@inject Client.Services.ApiAuthService AuthService
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.Globalization
@using System.Text.Json

<div class="weather-container">
    <h3 class="mb-3">Weather Forecast</h3>
    
    <div class="input-group mb-3">
        <input @bind="city" @bind:event="oninput" placeholder="Enter city name" class="form-control" />
        <button class="btn btn-primary" @onclick="GetWeather" disabled="@(loading || string.IsNullOrWhiteSpace(city))">
            @(loading ? "Loading..." : "Get Weather")
        </button>
        <button class="btn btn-outline-secondary" @onclick="GetCurrentLocationWeather">
            <i class="bi bi-geo-alt"></i> Near You
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
        </div>
    }

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading weather data...</p>
        </div>
    }

    @if (currentWeather != null)
    {
        <div class="weather-display">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4>Current Weather for @currentWeather.Name</h4>
                @if (AuthService.IsLoggedIn)
                {
                    <button class="btn btn-outline-danger @(isFavorite ? "active" : "")" 
                            @onclick="ToggleFavorite" 
                            disabled="@isProcessingFavorite">
                        <i class="bi @(isFavorite ? "bi-heart-fill" : "bi-heart")"></i>
                        @(isFavorite ? "Favorited" : "Add to Favorites")
                    </button>
                }
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="card weather-card">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                @if (!string.IsNullOrEmpty(currentWeather.Weather?[0]?.Icon))
                                {
                                    <img src="@($"https://openweathermap.org/img/wn/{currentWeather.Weather[0].Icon}@2x.png")" 
                                         alt="@currentWeather.Weather[0].Description" 
                                         style="width: 64px; height: 64px;" />
                                }
                                <div class="ms-3">
                                    <h2 class="mb-0">@currentWeather.Main?.Temp.ToString("F0")°C</h2>
                                    <p class="mb-0">@currentWeather.Weather?[0]?.Description</p>
                                </div>
                            </div>

                            @if (AuthService.IsLoggedIn)
                            {
                                <div class="detailed-info">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Feels like: @currentWeather.Main?.FeelsLike.ToString("F0")°C</small>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Humidity: @currentWeather.Main?.Humidity%</small>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Wind: @currentWeather.Wind?.Speed m/s</small>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Pressure: @currentWeather.Main?.Pressure hPa</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (forecastData != null && forecastData.Any())
    {
        <div class="forecast-display mt-4">
            <h4>@(AuthService.IsLoggedIn ? "Extended Forecast" : "3-Day Forecast")</h4>
            
            @if (!AuthService.IsLoggedIn)
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> 
                    <a href="/login" class="alert-link">Login</a> for extended 5-day forecast with detailed metrics
                </div>
            }

            <div class="row">
                @foreach (var day in forecastData.Take(AuthService.IsLoggedIn ? 5 : 3))
                {
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card forecast-card">
                            <div class="card-body">
                                <h6 class="card-title">@day.Date.ToString("ddd, MMM d", CultureInfo.InvariantCulture)</h6>
                                
                                @if (!string.IsNullOrEmpty(day.Icon))
                                {
                                    <img src="@($"https://openweathermap.org/img/wn/{day.Icon}.png")" 
                                         alt="@day.Description" 
                                         style="width: 48px; height: 48px;" />
                                }
                                
                                <h5>@day.AvgTemp.ToString("F0")°C</h5>
                                <p class="text-muted">@day.Description</p>
                                
                                @if (AuthService.IsLoggedIn)
                                {
                                    <div class="detailed-forecast">
                                        <small class="text-muted">
                                            Min: @day.MinTemp.ToString("F0")° / Max: @day.MaxTemp.ToString("F0")°
                                        </small>
                                        <br />
                                        <small class="text-muted">Humidity: @day.Humidity%</small>
                                        <br />
                                        <small class="text-muted">Wind: @day.WindSpeed m/s</small>
                                        <br />
                                        <small class="text-muted">Chance: @(day.Pop * 100).ToString("F0")%</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string city = "";
    private OpenWeatherResponse? currentWeather;
    private List<Client.Models.DailyForecast>? forecastData;
    private bool loading = false;
    private string? errorMessage;
    private List<string> favoriteCities = new();
    private bool isFavorite = false;
    private bool isProcessingFavorite = false;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        AuthService.OnAuthStateChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.InitializeAsync();
        }
    }

    private async Task GetWeather()
    {
        if (string.IsNullOrWhiteSpace(city)) return;

        loading = true;
        errorMessage = null;
        currentWeather = null;
        forecastData = null;

        try
        {
            Console.WriteLine($"Fetching weather for city: {city}");
            currentWeather = await WeatherService.GetCurrentAsync(city);
            Console.WriteLine($"Current weather response: {currentWeather}");
            var forecast = await WeatherService.GetForecastAsync(city);
            if (forecast?.List != null)
            {
                forecastData = forecast.List
                    .GroupBy(item => DateTime.Parse(item.Dt_Txt ?? DateTime.Now.ToString()).Date)
                    .Select(group => new Client.Models.DailyForecast
                    {
                        Date = group.Key,
                        AvgTemp = group.Average(i => i.Main?.Temp ?? 0),
                        MinTemp = group.Min(i => i.Main?.Temp_Min ?? 0),
                        MaxTemp = group.Max(i => i.Main?.Temp_Max ?? 0),
                        MainCondition = group.FirstOrDefault()?.Weather?[0]?.Main ?? "N/A",
                        Description = group.FirstOrDefault()?.Weather?[0]?.Description ?? "",
                        Icon = group.FirstOrDefault()?.Weather?[0]?.Icon ?? "",
                        Humidity = (int)(group.Average(i => i.Main?.Humidity ?? 0)),
                        WindSpeed = group.Average(i => i.Wind?.Speed ?? 0),
                        Pop = group.Max(i => i.Pop),
                        Rain3h = group.Max(i => i.Rain?._3h ?? 0)
                    })
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather data: {ex.Message}";
            Console.WriteLine($"Weather search error: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ToggleFavorite()
    {
        if (!AuthService.IsLoggedIn || string.IsNullOrEmpty(city)) return;

        var success = await AuthService.AddFavoriteCityAsync(city);
        if (success)
        {
            favoriteCities.Add(city);
            isFavorite = true;
        }
    }

    private async Task GetCurrentLocationWeather()
    {
        loading = true;
        errorMessage = null;
        currentWeather = null;
        forecastData = null;
        city = "";

        try
        {
            // call JS wrapper that returns a promise with Latitude/Longitude
            var pos = await JS.InvokeAsync<GeoPosition>("geoInterop.getCurrentPosition");

            if (pos == null)
            {
                errorMessage = "Unable to get your location. Please check your browser settings.";
                return;
            }

            // Get weather by coordinates
            currentWeather = await WeatherService.GetCurrentByCoordinatesAsync(pos.Latitude, pos.Longitude);

            if (currentWeather == null)
            {
                errorMessage = "Unable to fetch weather data for your location.";
                return;
            }

            // Set city name for display
            city = currentWeather.Name ?? "Your Location";

            // Get forecast by coordinates
            var forecast = await WeatherService.GetForecastByCoordinatesAsync(pos.Latitude, pos.Longitude);
            if (forecast?.List != null)
            {
                forecastData = forecast.List
                    .GroupBy(item => DateTime.Parse(item.Dt_Txt ?? DateTime.Now.ToString()).Date)
                    .Select(group => new Client.Models.DailyForecast
                    {
                        Date = group.Key,
                        AvgTemp = group.Average(i => i.Main?.Temp ?? 0),
                        MinTemp = group.Min(i => i.Main?.Temp_Min ?? 0),
                        MaxTemp = group.Max(i => i.Main?.Temp_Max ?? 0),
                        MainCondition = group.FirstOrDefault()?.Weather?[0]?.Main ?? "N/A",
                        Description = group.FirstOrDefault()?.Weather?[0]?.Description ?? "",
                        Icon = group.FirstOrDefault()?.Weather?[0]?.Icon ?? "",
                        Humidity = (int)(group.Average(i => i.Main?.Humidity ?? 0)),
                        WindSpeed = group.Average(i => i.Wind?.Speed ?? 0),
                        Pop = group.Max(i => i.Pop),
                        Rain3h = group.Max(i => i.Rain?._3h ?? 0)
                    })
                    .ToList();
            }
        }
        catch (JSException jex)
        {
            errorMessage = $"Location error: {jex.Message}";
            Console.WriteLine($"Geolocation error: {jex}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather data: {ex.Message}";
            Console.WriteLine($"Weather location error: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    // small DTO for JS interop result
    private class GeoPosition
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
